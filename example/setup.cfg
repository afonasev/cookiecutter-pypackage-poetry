[flake8]
enable-extensions = G
exclude = .git, .venv
ignore =
    A003 ; 'id' is a python builtin, consider renaming the class attribute
    W503 ; line break before binary operator
max-complexity = 8
max-line-length = 100
max-annotations-complexity = 3
show-source = true

[pylint]
generated-members=responses.*

ignored-classes=
    contextlib.closing,

good-names=i,j,k,e,x,_,pk,id
max-args=5
max-attributes=10
max-bool-expr=5
max-module-lines=200
max-nested-blocks=2
max-public-methods=5
max-returns=5
max-statements=20
output-format = colorized

min-similarity-lines=5 # Minimum lines number of a similarity
ignore-comments=yes # Ignore comments when computing similarities
ignore-docstrings=yes # Ignore docstrings when computing similarities
ignore-imports=yes # Ignore imports when computing similarities

disable=
    C0103, ; Constant name doesn't conform to UPPER_CASE naming style (invalid-name)
    C0111, ; Missing module docstring (missing-docstring)
    C0330, ; Wrong hanging indentation before block (add 4 spaces) - use black
    E0213, ; Method should have "self" as first argument (no-self-argument) - N805 for flake8
    R0201, ; Method could be a function (no-self-use)
    R0901, ; Too many ancestors (m/n) (too-many-ancestors)
    R0903, ; Too few public methods (m/n) (too-few-public-methods)

[mypy]
check_untyped_defs = True
disallow_any_generics = True
disallow_incomplete_defs = true
disallow_untyped_defs = True
follow_imports = silent
ignore_missing_imports = True
no_implicit_optional = true
strict_optional = True
warn_redundant_casts = True
warn_unused_ignores = True

# plugins = pydantic.mypy, sqlmypy

[isort]
balanced_wrapping = true
default_section = THIRDPARTY
include_trailing_comma=True
known_first_party = example, tests
line_length = 88
multi_line_output = 3
not_skip = __init__.py

[coverage:run]
omit =
    tests/*
    **/__main__.py
    *site-packages*
branch = True

[coverage:report]
show_missing = True
skip_covered = True
fail_under = 100
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    if TYPE_CHECKING:
